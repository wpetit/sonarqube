<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.ce.CeQueueMapper">

  <sql id="columns">
    cq.uuid,
    cq.task_type as taskType,
    cq.component_uuid as componentUuid,
    cq.status as status,
    cq.submitter_login as submitterLogin,
    cq.worker_uuid as workerUuid,
    cq.execution_count as executionCount,
    cq.started_at as startedAt,
    cq.created_at as createdAt,
    cq.updated_at as updatedAt
  </sql>

  <sql id="orderByDateAndId">
    order by
      cq.created_at asc,
      cq.id asc
  </sql>

  <sql id="orderByDescDateAndId">
    order by
      cq.created_at desc,
      cq.id desc
  </sql>

  <select id="selectByUuid" parameterType="String" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    where
      cq.uuid=#{uuid,jdbcType=VARCHAR}
  </select>

  <select id="countByStatusAndComponentUuid" parameterType="map" resultType="int">
    select
      count(1)
    from
      ce_queue
    where
      status=#{status,jdbcType=VARCHAR}
      <if test="componentUuid!=null">
        and component_uuid=#{componentUuid,jdbcType=VARCHAR}
      </if>
  </select>

  <select id="countAll" resultType="int">
    select
      count(1)
    from
      ce_queue
  </select>

  <select id="selectByComponentUuid" parameterType="String" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    where
      cq.component_uuid=#{componentUuid,jdbcType=VARCHAR}
    <include refid="orderByDateAndId"/>
  </select>

  <select id="selectAllInAscOrder" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    <include refid="orderByDateAndId"/>
  </select>

  <select id="selectByQueryInDescOrder" resultType="org.sonar.db.ce.CeQueueDto">
    select
    <include refid="columns"/>
    <include refid="sqlSelectByQuery"/>
    <include refid="orderByDescDateAndId"/>
  </select>

  <select id="countByQuery" resultType="int">
    select
      count(1)
    <include refid="sqlSelectByQuery"/>
  </select>

  <sql id="sqlSelectByQuery">
    from
      ce_queue cq
    <where>
      <if test="query.componentUuids != null and query.componentUuids.size()>0">
        and cq.component_uuid in
        <foreach collection="query.componentUuids" open="(" close=")" item="cUuid" separator=",">
          #{cUuid,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.statuses != null">
        and cq.status in
        <foreach collection="query.statuses" open="(" close=")" item="status" separator=",">
          #{status,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.type != null">
        and cq.task_type=#{query.type,jdbcType=VARCHAR}
      </if>
      <if test="query.minSubmittedAt != null">
        and cq.created_at &gt;= #{query.minSubmittedAt,jdbcType=BIGINT}
      </if>
    </where>
  </sql>

  <select id="selectEligibleForPeek" resultType="String">
    select
      cq.uuid
    from
      ce_queue cq
    where
      cq.status='PENDING'
      and not exists (
        select
          1
        from
          ce_queue cq2
        where
          cq.component_uuid=cq2.component_uuid
          and cq2.status &lt;&gt; 'PENDING'
      )
    <include refid="orderByDateAndId"/>
  </select>

  <insert id="insert" parameterType="org.sonar.db.ce.CeQueueDto" useGeneratedKeys="false">
    insert into ce_queue
    (
      uuid,
      task_type,
      component_uuid,
      status,
      submitter_login,
      worker_uuid,
      execution_count,
      started_at,
      created_at,
      updated_at
    )
    values (
      #{uuid,jdbcType=VARCHAR},
      #{taskType,jdbcType=VARCHAR},
      #{componentUuid,jdbcType=VARCHAR},
      #{status,jdbcType=VARCHAR},
      #{submitterLogin,jdbcType=VARCHAR},
      #{workerUuid,jdbcType=VARCHAR},
      #{executionCount,jdbcType=INTEGER},
      #{startedAt,jdbcType=BIGINT},
      #{createdAt,jdbcType=BIGINT},
      #{updatedAt,jdbcType=BIGINT}
    )
  </insert>

  <update id="resetAllToPendingStatus" parameterType="map">
    update ce_queue set
      status='PENDING',
      started_at=NULL,
      updated_at=#{updatedAt,jdbcType=BIGINT}
    where
      status &lt;&gt; 'PENDING'
  </update>

  <update id="updateIf" parameterType="map">
    update ce_queue set
      status=#{new.status,jdbcType=VARCHAR},
      started_at=#{new.startedAt,jdbcType=BIGINT},
      updated_at=#{new.updatedAt,jdbcType=BIGINT}
    where
      uuid=#{uuid,jdbcType=VARCHAR}
      and status=#{old.status,jdbcType=VARCHAR}
  </update>

  <delete id="deleteByUuid">
    delete from
      ce_queue
    where
      uuid=#{uuid,jdbcType=VARCHAR}
  </delete>

</mapper>
